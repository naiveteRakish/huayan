package com.whayer.cloud.storage.component.foundation.meta.impl;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ThreadPoolExecutor;

import whayer.cloud.framework.data.db.dao.HibernateDao;
import whayer.cloud.framework.data.db.dao.IDao;
import whayer.cloud.framework.data.db.dao.criteria.Criteria;
import whayer.cloud.framework.data.db.dao.criteria.Restrictions;
import whayer.cloud.framework.data.db.dao.datasource.DataBaseException;
import whayer.cloud.framework.data.db.dao.datasource.IDbSession;
import whayer.cloud.framework.data.db.dao.datasource.IDbSessionFactory;
import whayer.cloud.utility.core.BeanService;
import whayer.component.core.IService;

import com.whayer.cloud.component.objectcache.IOCSStatusNotifyCallback;
import com.whayer.cloud.component.objectcache.OCSCondition;
import com.whayer.cloud.component.objectcache.OCSStatus;
import com.whayer.cloud.component.objectcache.impl.ObjectCacheService;
import com.whayer.cloud.storage.business.base.data.QueryCondition;
import com.whayer.cloud.storage.business.base.data.QueryOperator;
import com.whayer.cloud.storage.component.foundation.meta.IMetaDataService;

/**
 * 
 * 这是一个元数据管理服务(如果多个线程使用单一实例进行调用，是没有问题的，但是如果一个线程调用了stop方法，那么整个服务就会停止，另外的线程也将无法使用该服务。除非再次调用start方法启动本服务)
 * 所有的元数据 主键 必须命名为 "id"
 * 
 * @ClassName: MetaDataManagerImpl
 * @author Administrator
 * @date 2017年8月9日 下午2:31:44
 * @version v1.0.0
 *
 */
public class MetaDataManagerImpl implements IMetaDataService, IService {

	// session工厂
	private IDbSessionFactory factory;
	// 获取bean实例的接口
	private BeanService beanService;
	// redis服务接口
	private ObjectCacheService objectCacheService;
	// 同步redis的线程池
	private ThreadPoolExecutor threadPoolExecutor;
	// redis重试次数 默认不重复
	private Integer REPETITION_TIME = 0;
	// 该服务接口可接收的对象类型
	private List<String> typeList;
	// redis连接状态
	private boolean redisStatus;
	// redis订阅id
	private String subscribeId;
	// 线程池核心线程数
	private int corePoolSize;
	// key前缀
	private String redisKeyPrefix = "COM.WHAYER.CLOUD.STORAGE.COMPONENT.FOUNDATION.META.IMPL.METADATAMANAGERIMPL";

	/**
	 * @return the redisKeyPrefix
	 */
	public String getRedisKeyPrefix() {
		return redisKeyPrefix;
	}

	/**
	 * @param redisKeyPrefix the redisKeyPrefix to set
	 */
	public void setRedisKeyPrefix(String redisKeyPrefix) {
		this.redisKeyPrefix = redisKeyPrefix;
	}

	/**
	 * @return the rEPETITION_TIME
	 */
	public Integer getREPETITION_TIME() {
		return REPETITION_TIME;
	}

	/**
	 * @param rEPETITION_TIME the rEPETITION_TIME to set
	 */
	public void setREPETITION_TIME(Integer rEPETITION_TIME) {
		REPETITION_TIME = rEPETITION_TIME;
	}

	/**
	 * @return the redisStatus
	 */
	public boolean isRedisStatus() {
		return redisStatus;
	}

	/**
	 * @param redisStatus the redisStatus to set
	 */
	public void setRedisStatus(boolean redisStatus) {
		this.redisStatus = redisStatus;
	}

	/**
	 * @return the typeList
	 */
	public List<String> getTypeList() {
		return typeList;
	}

	/**
	 * @param typeList the typeList to set
	 */
	public void setTypeList(List<String> typeList) {
		this.typeList = typeList;
	}

	/**
	 * @return the rEPETITIONTIME
	 */
	public Integer getREPETITIONTIME() {
		return REPETITION_TIME;
	}

	/**
	 * @param rEPETITIONTIME the rEPETITIONTIME to set
	 */
	public void setREPETITIONTIME(Integer rEPETITIONTIME) {
		REPETITION_TIME = rEPETITIONTIME;
	}

	/**
	 * @return the factory
	 */
	public IDbSessionFactory getFactory() {
		return factory;
	}

	/**
	 * @param factory the factory to set
	 */
	public void setFactory(IDbSessionFactory factory) {
		this.factory = factory;
	}

	/**
	 * @return the beanService
	 */
	public BeanService getBeanService() {
		return beanService;
	}

	/**
	 * @param beanService the beanService to set
	 */
	public void setBeanService(BeanService beanService) {
		this.beanService = beanService;
	}

	/**
	 * @return the objectCacheService
	 */
	public ObjectCacheService getObjectCacheService() {
		return objectCacheService;
	}

	/**
	 * @param objectCacheService the objectCacheService to set
	 */
	public void setObjectCacheService(ObjectCacheService objectCacheService) {
		this.objectCacheService = objectCacheService;
	}

	/**
	 * @return the executorService
	 */
	public ThreadPoolExecutor getExecutorService() {
		return threadPoolExecutor;
	}

	/**
	 * @param threadPoolExecutor the threadPoolExecutor to set
	 */
	public void setThreadPoolExecutor(ThreadPoolExecutor threadPoolExecutor) {
		this.threadPoolExecutor = threadPoolExecutor;
	}

	@SuppressWarnings("unchecked")
	@Override
	public <T> boolean addMetaData(final T item) {
		IDbSession session = null;
		boolean result = false;
		if (item == null) {
			return result;
		}
		// 校验类型
		if (checkType(item.getClass())) {
			return result;
		}

		try {
			session = factory.getSession();
			IDao dao = beanService.getBean(HibernateDao.class);
			session.beginTransaction();
			dao.setSession(session);
			dao.insert(item);
			session.commit();
			result = true;
		} catch (DataBaseException e) {
			result = false;
			e.printStackTrace();
			try {
				if (session != null) {
					session.rollback();
				}
			} catch (DataBaseException dataBaseException) {

				dataBaseException.printStackTrace();
			}
		}
		if (result) {
			// 操作redis
			executeCache(new Runnable() {
				//
				@Override
				public void run() {
					List<OCSCondition> ocsConditions = new ArrayList<OCSCondition>();
					// 因为传入类型为泛型 并且没有基类 只能制定每个元数据对象 id 都是 "id" 名字
					try {
						ocsConditions.add(new OCSCondition("id", OCSCondition.OCSOperator.EQUAL, item.getClass()
								.getMethod("getId").invoke(item)));
					} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException
							| NoSuchMethodException | SecurityException e) {
						e.printStackTrace();
					}
					Map<Integer, ?> map = objectCacheService.indexListObjectItem(getRedisKey(item.getClass()),
							item.getClass(), ocsConditions);
					if (map == null || map.isEmpty()) {
						// key 不存在 进行添加
						for (int j = 0; !objectCacheService.addListObjectItem(getRedisKey(item.getClass()), item)
								&& j < REPETITION_TIME; j++)
							;
					} else if (map != null && !map.isEmpty()) {
						// key 存在 进行替换
						Integer keyInteger = null;

						for (Map.Entry<Integer, ?> entry : map.entrySet()) {
							// 按照类型和id 获取的结果只会有一个
							keyInteger = (Integer) entry.getKey();
							break;
						}

						for (int j = 0; !objectCacheService.replaceListObjectItem(getRedisKey(item.getClass()),
								keyInteger, item) && j < REPETITION_TIME; j++)
							;
					}

				}
			});

		}

		return result;
	}

	@SuppressWarnings("unused")
	@Override
	public <T> boolean addMetaDatas(final List<T> items) {

		IDbSession session = null;
		boolean result = false;

		if (items == null || items.size() == 0) {
			return result;
		}

		for (int i = 0; i < items.size(); i++) {
			// 校验类型
			if (checkType(items.get(i).getClass())) {
				return result;
			}
			// 因为这里说校验第一个就可以了所以跳出 ， 如果后面需要校验所有元素 注释break 就ok
			break;
		}

		try {
			session = factory.getSession();
			IDao dao = beanService.getBean(HibernateDao.class);
			dao.setSession(session);
			session.beginTransaction();
			dao.insert(items.toArray());
			session.commit();
			result = true;
		} catch (DataBaseException e) {
			result = false;
			e.printStackTrace();
			try {
				if (session != null) {
					session.rollback();
				}
			} catch (DataBaseException dataBaseException) {

				dataBaseException.printStackTrace();
			}
		}
		if (result) {
			// 操作redis
			executeCache(new Runnable() {

				@Override
				public void run() {
					LinkedList<T> linkedList = new LinkedList<T>();
					int maxTime = linkedList.size() * REPETITION_TIME;
					// 更新
					for (int i = 0; i < items.size(); i++) {
						List<OCSCondition> ocsConditions = new ArrayList<OCSCondition>();
						String key = getRedisKey(items.get(i).getClass());

						// 因为传入类型为泛型 并且没有基类 只能制定每个元数据对象 id 都是 "id" 名字
						try {
							ocsConditions.add(new OCSCondition("id", OCSCondition.OCSOperator.EQUAL, items.get(i)
									.getClass().getMethod("getId").invoke(items.get(i))));
						} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException
								| NoSuchMethodException | SecurityException e) {
							e.printStackTrace();
						}

						Map<Integer, ?> map = objectCacheService.indexListObjectItem(key, items.get(i).getClass(),
								ocsConditions);
						if (map != null && !map.isEmpty()) {
							// key 存在 进行替换
							Integer keyInteger = null;

							for (Map.Entry<Integer, ?> entry : map.entrySet()) {
								// 按照类型和id 获取的结果只会有一个
								keyInteger = (Integer) entry.getKey();
								break;
							}
							// 这里不进行单独分组替换失败的，因为该方法是添加方法，不会存在太多误操作
							for (int j = 0; !objectCacheService.replaceListObjectItem(key, keyInteger, items.get(i))
									&& j < REPETITION_TIME; j++)
								;
							items.remove(i);
							i--;
						}
					}

					// 添加
					for (int i = 0; i < items.size(); i++) {
						if (!objectCacheService.addListObjectItem(getRedisKey(items.get(i).getClass()), items.get(i))) {
							// 添加失败的，存入失败列表。
							linkedList.add(items.get(i));
						}
					}

					while (linkedList.size() > 0) {
						int i = 0;
						for (int j = 0; j < linkedList.size(); j++) {
							if (objectCacheService.addListObjectItem(getRedisKey(linkedList.get(j).getClass()),
									linkedList.get(j))) {
								// 重试成功，从失败列表移除
								linkedList.remove(j);
								j--;
							}
						}
						i++;
						if (maxTime < i) {
							// 每条数据重试大概超过10次 则放弃继续执行
							break;
						}
					}
				}
			});
		}

		return result;
	}

	@SuppressWarnings("unchecked")
	@Override
	public <T> boolean modifyMetaData(final T item) {
		IDbSession session = null;
		boolean result = false;

		if (item == null) {
			return result;
		}
		// 校验类型
		if (checkType(item.getClass())) {
			return result;
		}

		try {
			session = factory.getSession();
			session.clear();
			session.beginTransaction();
			IDao dao = beanService.getBean(HibernateDao.class);
			dao.setSession(session);
			dao.update(item);
			session.commit();
			result = true;
		} catch (DataBaseException e) {
			result = false;
			e.printStackTrace();
			try {
				if (session != null) {
					session.rollback();
				}
			} catch (DataBaseException dataBaseException) {

				dataBaseException.printStackTrace();
			}
		}
		if (result) {
			// 操作redis
			executeCache(new Runnable() {
				@Override
				public void run() {
					List<OCSCondition> ocsConditions = new ArrayList<OCSCondition>();

					// 因为传入类型为泛型 并且没有基类 只能制定每个元数据对象 id 都是 "id" 名字
					try {
						ocsConditions.add(new OCSCondition("id", OCSCondition.OCSOperator.EQUAL, item.getClass()
								.getMethod("getId").invoke(item)));
					} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException
							| NoSuchMethodException | SecurityException e) {
						e.printStackTrace();
					}

					String key = getRedisKey(item.getClass());
					Map<Integer, ?> map = objectCacheService.indexListObjectItem(key, item.getClass(), ocsConditions);
					if (map != null && !map.isEmpty()) {
						Integer keyInteger = null;
						for (Map.Entry<Integer, ?> entry : map.entrySet()) {
							// 按照类型和id 获取的结果只会有一个
							keyInteger = (Integer) entry.getKey();
							break;
						}
						for (int j = 0; !objectCacheService.replaceListObjectItem(key, keyInteger, item)
								&& j < REPETITION_TIME; j++)
							;
					}
				}
			});
		}

		return result;
	}

	@Override
	public <T> boolean deleteMetaData(final Class<T> type, final String id) {
		IDbSession session = null;
		boolean result = false;
		if (type == null || id == null || "".equals(id.trim())) {
			return result;
		}

		// 校验类型
		if (checkType(type)) {
			return result;
		}

		try {
			// dao操作
			session = factory.getSession();
			session.clear();
			session.beginTransaction();
			IDao dao = beanService.getBean(HibernateDao.class);
			dao.setSession(session);
			dao.delete(type, id);
			session.commit();
			result = true;
		} catch (DataBaseException e) {
			result = false;
			e.printStackTrace();
			try {
				if (session != null) {
					session.rollback();
				}
			} catch (DataBaseException dataBaseException) {

				dataBaseException.printStackTrace();
			}
		}
		if (result) {
			// 操作redis
			executeCache(new Runnable() {
				@Override
				public void run() {
					List<OCSCondition> ocsConditions = new ArrayList<OCSCondition>();
					// 因为传入类型为泛型 并且没有基类 只能制定每个元数据对象 id 都是 "id" 名字

					ocsConditions.add(new OCSCondition("id", OCSCondition.OCSOperator.EQUAL, id));

					String key = getRedisKey(type);
					Map<Integer, ?> map = objectCacheService.indexListObjectItem(key, type.getClass(), ocsConditions);
					if (map != null && !map.isEmpty()) {
						Integer keyInteger = null;
						for (Map.Entry<Integer, ?> entry : map.entrySet()) {
							// 按照类型和id 获取的结果只会有一个
							keyInteger = (Integer) entry.getKey();
							break;
						}

						for (int j = 0; !objectCacheService.removeListObjectItem(key, keyInteger)
								&& j < REPETITION_TIME; j++)
							;
					}
				}
			});
		}

		return result;
	}

	@Override
	public <T> boolean deleteMetaData(final Class<T> type) {
		IDbSession session = null;
		boolean result = false;
		if (type == null) {
			return result;
		}
		// 校验类型
		if (checkType(type)) {
			return result;
		}

		try {
			session = factory.getSession();
			session.clear();
			session.beginTransaction();
			IDao dao = beanService.getBean(HibernateDao.class);
			dao.setSession(session);
			dao.delete(type, (Criteria) null);
			session.commit();
			result = true;
		} catch (DataBaseException e) {
			result = false;
			e.printStackTrace();
			try {
				if (session != null) {
					session.rollback();
				}
			} catch (DataBaseException dataBaseException) {

				dataBaseException.printStackTrace();
			}
		}
		if (result) {
			// 操作redis
			executeCache(new Runnable() {

				@Override
				public void run() {
					for (int j = 0; !objectCacheService.deleteListObject(getRedisKey(type)) && j < REPETITION_TIME; j++)
						;
				}
			});
		}
		return result;
	}

	@Override
	public <T> T getMetaData(Class<T> type, String id) {
		IDbSession session = null;
		T result = null;
		final String key = getRedisKey(type);
		// 数据是否来自数据库
		boolean isDataBase = false;
		if (type == null || id == null || "".equals(id.trim())) {
			return result;
		}
		// 校验类型
		if (checkType(type)) {
			return result;
		}
		// 查询缓存
		if (redisStatus) {

			List<OCSCondition> ocsConditions = new ArrayList<OCSCondition>();
			ocsConditions.add(new OCSCondition("id", OCSCondition.OCSOperator.EQUAL, id));
			Map<Integer, T> map = objectCacheService.indexListObjectItem(key, type, ocsConditions);
			if (map != null && !map.isEmpty()) {
				for (Map.Entry<Integer, T> entry : map.entrySet()) {
					// 按照类型和id查询 结果只会有一条
					result = entry.getValue();
					break;
				}
			}
		}

		if (result == null) {
			try {
				session = factory.getSession();
				IDao dao = beanService.getBean(HibernateDao.class);
				dao.setSession(session);
				result = dao.selectOne(type, id);
				isDataBase = true;
			} catch (DataBaseException e) {
				e.printStackTrace();
				try {
					if (session != null) {
						session.rollback();
					}
				} catch (DataBaseException dataBaseException) {

					dataBaseException.printStackTrace();
				}
			}
			if (result != null && isDataBase) {
				// 操作redis
				final T var = result;
				executeCache(new Runnable() {

					@Override
					public void run() {
						for (int j = 0; !objectCacheService.addListObjectItem(key, var) && j < REPETITION_TIME; j++)
							;
					}
				});
			}
		}

		return result;
	}

	@Override
	public <T> List<T> getMetaData(Class<T> type, List<QueryCondition> condition) {
		IDbSession session = null;
		List<T> result = null;
		final String key = getRedisKey(type);
		// 数据是否来自数据库
		boolean isDataBase = false;
		if (type == null) {
			return result;
		}
		if (checkType(type)) {
			return result;
		}

		Criteria where = null;
		List<OCSCondition> ocsConditions = null;
		if (condition != null && condition.size() > 0) {
			ocsConditions = new ArrayList<OCSCondition>();
			// queryCondition中任一属性为null，则丢弃该项匹配条件
			for (QueryCondition c : condition) {
				if (c != null && c.getKey() != null && !c.getKey().equals("") && c.getQueryOperator() != null
						&& c.getValue() != null) {
					if (where == null) {
						where = new Criteria();
					}
					if (c.getQueryOperator().getOperator() == QueryOperator.Operator.EQUAL) {
						where.add(Restrictions.eq(type, c.getKey(), c.getValue()));
						ocsConditions.add(new OCSCondition(c.getKey(), OCSCondition.OCSOperator.EQUAL, c.getValue()
								.toString()));
					} else if (c.getQueryOperator().getOperator() == QueryOperator.Operator.LIKE) {
						where.add(Restrictions.like(type, c.getKey(), c.getValue().toString()));
						ocsConditions.add(new OCSCondition(c.getKey(), OCSCondition.OCSOperator.LIKE, c.getValue()
								.toString()));
					} else {
						// 还没有这个比较条件
						return result;
					}
				}
			}

		}
		if (redisStatus && where != null) {
			// 按条件查询缓存
			Map<Integer, T> map = objectCacheService.indexListObjectItem(key, type, ocsConditions);
			result = new ArrayList<T>();
			if (map != null && !map.isEmpty()) {
				for (Map.Entry<Integer, T> entry : map.entrySet()) {
					// 封装结果
					result.add(entry.getValue());
				}
			}
		} else if (redisStatus) {
			// 获取整个业务链表对象
			result = objectCacheService.getListObject(key, type);
		}

		if (result == null || result.size() == 0) {

			try {
				session = factory.getSession();
				IDao dao = beanService.getBean(HibernateDao.class);
				dao.setSession(session);
				result = dao.selectList(type, where);
				isDataBase = true;
			} catch (DataBaseException e) {
				e.printStackTrace();
			}
			if (result != null && result.size() != 0 && isDataBase) {
				final List<T> list = result;
				// 操作redis
				executeCache(new Runnable() {

					@Override
					public void run() {
						LinkedList<T> linkedList = null;
						for (int i = 0; i < list.size(); i++) {
							if (!objectCacheService.addListObjectItem(key, list.get(i))) {
								// 添加失败的，存入失败列表。
								if (linkedList == null) {
									linkedList = new LinkedList<T>();
								}
								linkedList.add(list.get(i));
							}
						}
						if (linkedList != null) {
							int maxTime = linkedList.size() * REPETITION_TIME;
							while (linkedList.size() > 0) {
								int i = 0;
								for (int j = 0; j < linkedList.size(); j++) {
									if (objectCacheService.addListObjectItem(key, linkedList.get(j))) {
										// 重试成功，从失败列表移除
										linkedList.remove(j);
										j--;
									}
								}
								i++;
								if (maxTime < i) {
									// 每条数据重试大概超过10次 则放弃继续执行
									break;
								}
							}
						}
					}
				});
			}
		}

		return result;
	}

	/**
	 * 检查类型是否合法
	 * @Title: checkType
	 * @param type
	 * @return boolean 返回true 表示非法， false表示合法
	 * @see 
	 * @throws
	 * @author Administrator
	 */
	private <T> boolean checkType(Class<T> type) {
		boolean boo = true;
		for (String typeItem : typeList) {
			if ((type.getName().equals(typeItem))) {
				boo = false;
				break;
			}
		}
		return boo;
	}

	/**
	 * 服务启动
	 */
	@Override
	public synchronized void start() {
		// 线程池初始化
		if (threadPoolExecutor.getCorePoolSize() != 0) {
			corePoolSize = threadPoolExecutor.getCorePoolSize();
		} else {
			threadPoolExecutor.setCorePoolSize(corePoolSize);
		}

		this.objectCacheService.start();
		redisStatus = true;
		redisStatus = initListObject();
		if (redisStatus) {
			// 订阅redis通知
			subscribeId = this.objectCacheService.subscribeStatus(new IOCSStatusNotifyCallback() {

				@Override
				public void notifyStatus(OCSStatus status) {
					if (OCSStatus.OFF_LINE == status) {
						// 下线 清空任务队列
						redisStatus = false;
						threadPoolExecutor.getQueue().clear();
						// 减少多余线程回收资源
						threadPoolExecutor.setCorePoolSize(0);
					} else {
						// 上线
						redisStatus = initListObject();

					}
					threadPoolExecutor.setCorePoolSize(corePoolSize);
				}

			});
		}
	}

	/**
	 * 服务关闭
	 */
	@Override
	public synchronized void stop() {
		threadPoolExecutor.getQueue().clear();

		// 减少多余线程回收资源
		threadPoolExecutor.setCorePoolSize(0);

		// 清空redis缓存
		if (redisStatus) {
			for (String string : typeList) {
				try {
					for (int j = 0; !objectCacheService.deleteListObject(getRedisKey(Class.forName(string)))
							&& j < REPETITION_TIME; j++)
						;
				} catch (ClassNotFoundException e) {
					e.printStackTrace();
				}
			}
			// 取消订阅
			for (int j = 0; !this.objectCacheService.unsubscribeStatus(subscribeId) && j < REPETITION_TIME; j++)
				;
		}
		this.objectCacheService.stop();
		redisStatus = false;
	}

	/**
	 * redis同步处理器
	 * 这里用一句话描述这个方法的作用
	 * @Title: executeCache
	 * @param runnable void
	 * @see 
	 * @throws
	 * @author Administrator
	 */
	private void executeCache(Runnable runnable) {
		if (redisStatus) {
			// redis 在线
			threadPoolExecutor.execute(runnable);
		} else {
			// redis 不在线
		}
	}

	/**
	 * 将数据库所有元数据表缓存到redis中待用
	 * @throws ClassNotFoundException 
	 * @Title: initList void
	 * @see 
	 * @throws
	 * @author Administrator
	 */
	private boolean initListObject() {
		for (String type : typeList) {
			try {
				if (!objectCacheService.saveListObject(getRedisKey(Class.forName(type)),
						this.getMetaData(Class.forName(type)))) {
					return false;
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
		}
		return true;
	}

	/**
	 * 初始化同步对象
	 * @Title: getMetaData
	 * @param forName
	 * @return List<Object>
	 * @see 
	 * @throws
	 * @author Administrator
	 */
	private <T> List<T> getMetaData(Class<T> type) {
		IDbSession session = null;
		List<T> result = new ArrayList<T>();
		if (type == null) {
			return result;
		}
		if (checkType(type)) {
			return result;
		}
		try {
			session = factory.getSession();
			IDao dao = beanService.getBean(HibernateDao.class);
			dao.setSession(session);
			result = dao.selectList(type, (Criteria) null);
		} catch (DataBaseException e) {
			e.printStackTrace();
		}
		return result;
	}

	/**
	 * 生成该对象的rediskey
	 * @Title: getRedisKey
	 * @param item
	 * @return String
	 * @see 
	 * @throws
	 * @author Administrator
	 */
	private <T> String getRedisKey(Class<T> item) {
		StringBuilder sb = new StringBuilder(redisKeyPrefix);
		sb.append(item.getName().toUpperCase());
		return sb.toString();
	}

}
